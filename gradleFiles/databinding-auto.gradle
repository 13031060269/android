import org.json.JSONObject

boolean isApp = project.getPlugins().hasPlugin("com.android.application")
afterEvaluate {
    if (!isApp) {
        return
    }
    android.applicationVariants.each { variant ->
        String varName = variant.name
        tasks.findByName("dataBindingGenBaseClasses${varName.capitalize()}")?.doLast {
            File classFile = null
            File artifactFile = null
            String className = "DataBindingHelper"
            outputs.files.files.each {
                if (it.absolutePath.contains("data_binding_base_class_log_artifact")) {
                    artifactFile = it.listFiles().first()
                } else if (it.absolutePath.contains("data_binding_base_class_source_out")) {
                    classFile = new File("${it.absolutePath}/com/lwp/lib/${className}.kt")
                }
            }
            List<DataBindingBean> listBean = new ArrayList<>()
            Set<String> imports = new HashSet<>()
            classFile.parentFile.mkdirs()
            JSONObject jsonObject = new JSONObject(artifactFile.text)
            jsonObject = jsonObject.getJSONObject("mappings")
            jsonObject.keys().each { key ->
                JSONObject obj = jsonObject.getJSONObject(key)
                DataBindingBean bean = new DataBindingBean()
                bean.packageName = obj.getString("module_package")
                bean.layoutName = key
                bean.qualifiedName = obj.getString("qualified_name")
                imports.add(bean.qualifiedName)
                Map<String, String> variables = new HashMap<>()
                obj = obj.getJSONObject("variables")
                obj?.keys()?.each {
                    variables.put(it, obj.getString(it))
                    imports.add(obj.getString(it))
                }
                bean.variables = variables
                listBean.add(bean)
            }
            String viewDataBinding = "viewDataBinding"
            StringBuilder classContent = new StringBuilder()
            classContent.append("package com.lwp.lib")
            classContent.append("\n")
            imports.each {
                classContent.append("\nimport $it")
            }
            classContent.append("\nimport androidx.databinding.ViewDataBinding")
            classContent.append("\n")
            classContent.append("\nimport com.lwp.lib.mvp.interfaces.Factory")
            classContent.append("\n")
            classContent.append("\nclass ${className} {")
            classContent.append("\n")
            classContent.append("\n\tfun attach($viewDataBinding:ViewDataBinding ,factory: Factory): () -> List<Any?>{")

            listBean.each {
                String qualifiedName = it.qualifiedName.substring(it.qualifiedName.lastIndexOf(".") + 1)
                classContent.append("\n\t\tif ($viewDataBinding is $qualifiedName){")
                classContent.append("\n\t\t\tval result=mutableListOf<Any?>()")
                StringBuilder method = new StringBuilder()
                it.variables.each { key, value ->
                    String variableName = value.substring(value.lastIndexOf(".") + 1)
                    String name = variableName.uncapitalize()
                    classContent.append("\n\t\t\tval $name=factory.create(${variableName}::class.java)")
                    classContent.append("\n\t\t\tresult.add($name)")
                    method.append("\n\t\t\t\t${viewDataBinding}.set${key.capitalize()}($name)")
                }
                classContent.append("\n\t\t\treturn {")
                classContent.append(method.toString())
                classContent.append("\n\t\t\t\tresult")
                classContent.append("\n\t\t\t}")
                classContent.append("\n\t\t}")
            }
            classContent.append("\n\t\treturn { listOf() }")
            classContent.append("\n\t}")
            classContent.append("\n}")
            classFile.write(classContent.toString())
        }
    }
}

class DataBindingBean {
    String layoutName
    String qualifiedName
    String packageName
    Map<String, String> variables

    @Override
    String toString() {
        return "DataBindingBean{" +
                "layoutName='" + layoutName + '\'' +
                ", qualifiedName='" + qualifiedName + '\'' +
                ", packageName='" + packageName + '\'' +
                ", variables=" + variables +
                '}';
    }
}

buildscript {
    repositories {
        google()
        jcenter() { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'
    }
}
