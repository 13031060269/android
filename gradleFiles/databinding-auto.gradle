import org.json.JSONObject

String path = file("build/source").absolutePath
boolean isApp = project.getPlugins().hasPlugin("com.android.application")
afterEvaluate {
    if (!isApp) {
        return
    }
    android.applicationVariants.each { variant ->
        String varName = variant.name
        String taskFix = varName.capitalize()
        String variantPath = path + "/" + taskFix
        String classesFile = file("build/generated/source/buildConfig/$varName").absolutePath
        File binding_classes = file("${variantPath}/binding_classes.json")
        binding_classes.parentFile.mkdirs()
        String className = "com.lwp.lib.mvp.mapper.VariableFactoryImpl"
        Map<String, Set<ClassNameBean>> viewModelMap = new HashMap<>()
        Task dataBindingJson2Class = tasks.create("dataBindingJson2Class${taskFix}") {
            doLast {
                if (!binding_classes.exists()) return
                File classFile = new File(classesFile + "/${className.replace(".", "/")}.kt")
                List<DataBindingBean> listBean = new ArrayList<>()
                classFile.parentFile.mkdirs()
                JSONObject jsonObject = new JSONObject(binding_classes.text)
                jsonObject = jsonObject.getJSONObject("mappings")
                jsonObject.keys().each { key ->
                    JSONObject json = jsonObject.getJSONObject(key)
                    Map<String, ClassNameBean> variables = new HashMap<>()
                    String parent = json.getString("qualified_name")
                    json.getJSONObject("variables").toMap().each { mKey, value ->
                        if (value.endsWith("ViewModel")) {
                            ClassNameBean nameBean = ClassNameBean.parse(value)
                            variables.put(mKey, nameBean)
                        }
                    }
                    if (variables.size() > 0) {
                        json.getJSONArray("implementations").each { JSONObject obj ->
                            DataBindingBean bindingBean = new DataBindingBean()
                            bindingBean.variables = variables
                            bindingBean.qualifiedName = ClassNameBean.parse(obj.getString("qualified_name"), parent)
                            listBean.add(bindingBean)
                            bindingBean.variables.each { k, variable ->
                                Set<ClassNameBean> set = viewModelMap.get(variable.name)
                                if (set == null) {
                                    set = new HashSet<>()
                                    viewModelMap.put(variable.name, set)
                                }
                                set.add(bindingBean.qualifiedName)
                            }
                        }
                    }

                }
                classFile.write("package ${className.substring(0, className.lastIndexOf("."))}\n")
                classFile.append("class ${className.substring(className.lastIndexOf(".") + 1)} : VariableFactory(){\n")
                classFile.append("\tinit{\n")
                viewModelMap.each { clazz, value ->
                    ClassNameBean classBean = ClassNameBean.parse(clazz)
                    File file = new File(classesFile + "/${classBean.name.replace(".", "/")}Bindings.kt")
                    file.parentFile.mkdirs()
                    file.write("package ${classBean.packageName}\n")
                    file.append("import ${classBean.name}\n")
                    value.each { classNameBean ->
                        file.append("import ${classNameBean.name}\n")
                    }
                    file.append("import com.lwp.lib.utils.getVar\n")
                    file.append("import com.lwp.lib.utils.saveVar\n")
                    file.append("import com.lwp.lib.utils.cast\n")
                    value.each { name ->
                        file.append("\n")
                        file.append("var ${classBean.simpleName}.binding${name.parent.simpleName}:${name.parent.name}\n")
                        file.append("\tget() = cast(getVar(${name.simpleName}::class.java))\n")
                        file.append("\tset(value) = saveVar(value)\n")
                    }
                }
                listBean.each { dataBindingBean ->
                    ClassNameBean qualifiedName = dataBindingBean.qualifiedName
                    File qualifiedFile = new File(classesFile + "/${qualifiedName.name.replace(".", "/")}Mapper.kt")
                    qualifiedFile.parentFile.mkdirs()
                    qualifiedFile.write("package ${qualifiedName.packageName}\n")
                    qualifiedFile.append("import com.lwp.lib.mvp.mapper.VariableMapper\n")
                    qualifiedFile.append("import com.lwp.lib.mvp.interfaces.Factory\n")
                    qualifiedFile.append("import com.lwp.lib.utils.cast\n")
                    dataBindingBean.variables.each { _, value ->
                        qualifiedFile.append("import ${value.name}\n")
                        qualifiedFile.append("import ${value.packageName}.binding${qualifiedName.parent.simpleName}\n")
                    }
                    qualifiedFile.append("class ${qualifiedName.simpleName}Mapper : VariableMapper<${qualifiedName.simpleName}>{\n")
                    qualifiedFile.append("\toverride fun attachToDataBinding(container: ${qualifiedName.simpleName}, factory: Factory) {\n")
                    dataBindingBean.variables.each { key, value ->
                        String valueName = value.simpleName.uncapitalize()
                        qualifiedFile.append("\t\tfactory.create(${value.simpleName}::class.java)?.apply {\n")
                        qualifiedFile.append("\t\t\tfunctionFlush = {\n")
                        qualifiedFile.append("\t\t\t\tcontainer.$key = this\n")
                        qualifiedFile.append("\t\t\t}\n")
                        qualifiedFile.append("\t\t\tflush()\n")
                        qualifiedFile.append("\t\t\tbinding${qualifiedName.parent.simpleName} = cast(container)\n")
                        qualifiedFile.append("\t\t}\n")
                    }
                    qualifiedFile.append("\t}\n")
                    qualifiedFile.append("}\n")
                    classFile.append("\t\taddMapper(${qualifiedName.name}Mapper())\n")
                }
                classFile.append("\t}\n")
                classFile.append("}\n")
            }
        }
        Task dataBindingGenBaseClasses = tasks.findByName("dataBindingGenBaseClasses${varName.capitalize()}")
        dataBindingGenBaseClasses.finalizedBy dataBindingJson2Class
        dataBindingGenBaseClasses?.doLast {
            outputs.files.files.each { f ->
                if (f.absolutePath.contains("data_binding_base_class_log_artifact")) {
                    binding_classes.write(f.listFiles().first().text)
                }
            }
        }
    }
}

class DataBindingBean {
    String layoutName//layout的名称
    ClassNameBean qualifiedName//databing的名字
    Map<String, ClassNameBean> variables//属性的map
}

class ClassNameBean {
    String simpleName
    String packageName
    ClassNameBean parent
    String name

    private ClassNameBean(String clazzName, String parent) {
        this.parent = parse(parent)
        name = clazzName
        int index = clazzName.lastIndexOf(".")
        packageName = clazzName.substring(0, index)
        simpleName = clazzName.substring(index + 1)
    }

    static ClassNameBean parse(String clazzName, String parent) {
        if (clazzName == null) return null
        return new ClassNameBean(clazzName, parent)
    }

    static ClassNameBean parse(String clazzName) {
        return parse(clazzName, null)
    }

    @Override
    boolean equals(Object o) {
        return o instanceof ClassNameBean && o.name == name
    }
}

buildscript {
    repositories {
        google()
        jcenter() { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'
    }
}
