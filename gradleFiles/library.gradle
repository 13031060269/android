apply from: "../gradleFiles/rename-sources.gradle"

configurations {
    attach
}
def appDir = buildDir.absolutePath + "/apk-source"
def fatherDir = appDir + "/father"
def thisDir = appDir + "/this"
boolean isApp = project.getPlugins().hasPlugin("com.android.application")
afterEvaluate {
    if (!isApp) return
    file(fatherDir).deleteDir()
    configurations.attach.files.each { f ->
        copy {
            from zipTree(f)
            include "apkres/**", "res_list.txt"
            into fatherDir
        }
        configurations['compileOnly'].dependencies.add(project.dependencies.create(files(f)))
    }
    String aapt = new File(android.getAdbExecutable().getParentFile().getParentFile(), "build-tools/" + android.getBuildToolsVersion() + "/aapt2").absolutePath
    for (variant in android.applicationVariants) {
        def varName = variant.name
        def taskFix = varName.capitalize()
        Task mergeResources = variant.getMergeResourcesProvider().get()
        mergeResources.doLast {
            String mergeResourcesOutPath = mergeResources.outputDir.get().getAsFile().absolutePath
            fileTree(appDir).each {
                "$aapt compile -o  $mergeResourcesOutPath $it".execute().waitFor()
            }
        }
        tasks.findByName("process${taskFix}Resources")?.doLast {
            file(thisDir).deleteDir()
            File ap_ = fileTree(resPackageOutputFolder).include("*.ap_").first()
            copy {
                from zipTree(ap_)
                into thisDir
            }
            File resList = file("$fatherDir/res_list.txt")
            if (!resList.exists()) {
                return
            }
            List<String> delSet = resList.readLines()
            ap_.delete()
            fileTree(file(thisDir)).each {
                String key = it.parentFile.name + "_" + it.name
                if (delSet.contains(key.trim())) {
                    it.delete()
                }
            }
            clearEmpty(file(thisDir))
            "jar  -cfM ${ap_.absolutePath} -C $thisDir /".execute().waitFor()
        }
    }
}

def clearEmpty(File... file) {
    file?.each {
        if (it.isDirectory()) {
            def files = it.listFiles()
            clearEmpty(files)
            files = it.listFiles()
            if (files == null || files.size() == 0) {
                it.delete()
            }
        }
    }
}
